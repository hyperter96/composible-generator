// Biz Layer for {{ service }}
package biz

import (
	"context"
	"github.com/go-kratos/kratos/v2/log"
  {% if found_struct %}"google.golang.org/protobuf/types/known/structpb"
{% endif %}
)

{% for func in functions %}// {{ func.request_struct }}Param struct represents the request parameters for {{ func.name }} API
type {{ func.request_struct }}Param struct {
{% for parameter in func.request_parameters %}{% if parameter.required %}  {{ parameter.name | capitalize }} {{ parameter.ty }}{% else %}  {{ parameter.name | capitalize }} *{{ parameter.ty }}{% endif %}
{% endfor %}}

{% endfor %}
{% for func in functions %}{% if func.reveal_struct %}// {{ func.return_type }}Param struct represents the reply parameters for {{ func.name }} API
type {{ func.return_type }}Param struct {
{% for parameter in func.response_parameters %}  {{ parameter.name | capitalize }} {{ parameter.ty }}
{% endfor %}}{% endif %}

{% endfor %}

{% for key, item in items %}type {{ key }} struct {
{% for parameter in item %}  {{ parameter.name | capitalize }}  {{parameter.ty}}
{% endfor %}}

{% endfor %}
type {{ service | camel_case_upper }}Repo interface {
{% for func in functions %}  {{ func.name }}(ctx context.Context, param *{{ func.request_struct }}Param) (*{{ func.return_type }}Param, error)
{% endfor %}}

type {{ service | camel_case_upper }}Usecase struct {
	repo {{ service | camel_case_upper }}Repo
	log  *log.Helper
}

func New{{ service | camel_case_upper }}Usecase(repo {{ service | camel_case_upper }}Repo, logger log.Logger) *{{ service | camel_case_upper }}Usecase {
	return &{{ service | camel_case_upper }}Usecase{
		repo: repo,
		log:  log.NewHelper(log.With(logger, "module", "usecase/{{ service | snake_case }}")),
	}
}

{% for func in functions %}
func (uc *{{ service | camel_case_upper }}Usecase) {{ func.name }}(ctx context.Context, param *{{ func.request_struct }}Param) (*{{ func.return_type }}Param, error) {
	return uc.repo.{{ func.name  }}(ctx, param)
}
{% endfor %}
